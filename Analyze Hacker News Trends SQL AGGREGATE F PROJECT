Project:
In this project, you will be working with a table named hacker_news that contains stories from Hacker News (https://news.ycombinator.com) since its launch in 2007. It has the following columns:
  -  title: the title of the story
  -  user: the user who submitted the story
  -  score: the score of the story
  -  timestamp: the time of the story
  -  url: the link of the story
This data was kindly made publicly available under the MIT license (https://opensource.org/license/mit/).

        1. Start by getting a feel for the hacker_news table!
           Let’s find the most popular Hacker News stories:
              SELECT title, score
              FROM hacker_news
              ORDER BY score DESC
              LIMIT 5;
           What are the top five stories with the highest scores?

-  Recent studies have found that online forums tend to be dominated by a small percentage of their users (1-9-90 Rule).
   Is this true of Hacker News?
   Is a small percentage of Hacker News submitters taking the majority of the points?
           
        2. First, find the total score of all the stories.
        
        // 
        SELECT SUM(score)
        FROM hacker_news;
        
        Answer: The total score of the hacker_news table is 6366.

-  Next, we need to pinpoint the users who have accumulated a lot of points across their stories.

        3. Find the individual users who have gotten combined scores of more than 200, and their combined scores.
           GROUP BY and HAVING are needed!
        
        //  
        SELECT user, SUM(score)
        FROM hacker_news
        GROUP BY user
        HAVING SUM(score)>200
        ORDER BY 2 DEXC; {or ORDER BY SUM(score) DESC;  <--  but this line in general is just an optional one)

-  Then, we want to add these users’ scores together and divide by the total to get the percentage.
        
        4. Add their scores together and divide it by the total sum. Like so:
           SELECT (1.0 + 2.0 + 3.0) / 6.0;
           So, is Hacker News dominated by these users?
        
        //
        SELECT (517+309+304+282)/6366.0*100;
        
        Answer: ~22.18 %

-  Oh no! While we are looking at the power users, some users are rickrolling 
   — tricking readers into clicking on a link to a funny video and claiming that it links to information about coding.
   The url of the video is:
   https://www.youtube.com/watch?v=dQw4w9WgXcQ

        5. How many times has each offending user posted this link?

        //
        SELECT user, COUNT(url)                             OR                                  SELECT user, COUNT(*)
        FROM hacker_news                                                                        FROM hacker_news
        WHERE URL='https://www.youtube.com/watch?v=dQw4w9WgXcQ'                                 WHERE URL='https://www.youtube.com/watch?v=dQw4w9WgXcQ'
        GROUP BY user                                                                           GROUP BY 1
        ORDER BY COUNT(*) DESC;                                                                 ORDER BY 2;

        Answer: user	          COUNT(url)
                sonnynomnom	    2
                scorpiosister	  1

-  Hacker News stories are essentially links that take users to other websites.
   Which of these sites feed Hacker News the most:
   GitHub, Medium, or New York Times?
   First, we want to categorize each story based on their source.
   We can do this using a CASE statement:

    SELECT CASE
       WHEN url LIKE '%github.com%' THEN 'GitHub'
       -- WHEN statement here
       -- WHEN statement here
       -- ELSE statement here
      END AS 'Source'
    FROM hacker_news;

        6. Fill in the other WHEN statements and the ELSE statement.
        
        //
        SELECT CASE
         WHEN url LIKE '%github.com%' THEN 'GitHub'
         WHEN url LIKE '%medium.com%' THEN 'Medium'
         WHEN url LIKE '%nytimes.com%' THEN 'New York Times'
         ELSE 'Other'
         END AS 'Url Source'
         FROM hacker_news;

        Answer: The number of times stories are linked to:
                •	GitHub - 23
                •	Medium - 12
                •	New York Times - 13

-  Next, build on the previous query:
    Add a column for the number of stories from each URL using COUNT().
    Also, GROUP BY the CASE statement.
    Remember that you can refer to a column in GROUP BY using a number.

        7. //
        SELECT CASE
           WHEN url LIKE '%github.com%' THEN 'GitHub'
           WHEN url LIKE '%medium.com%' THEN 'Medium'
           WHEN url LIKE '%nytimes.com%' THEN 'New York Times'
           ELSE 'Other'
          END AS 'Source',
          COUNT(*)
        FROM hacker_news
        GROUP BY 1;
        
        Answer: The number of times stories are linked to:
               •	GitHub - 23
               •	Medium - 12
               •	New York Times - 13

-  Every submitter wants their story to get a high score so that the story makes it to the front page, but…
   What’s the best time of the day to post a story on Hacker News?
   Before we get started, let’s run this query and take a look at the timestamp column:

    SELECT timestamp
    FROM hacker_news
    LIMIT 10;

   Notice that the values are formatted like:
   2018-05-08T12:30:00Z
   If you ignore the T and Z, the format is:
   YYYY-MM-DD HH:MM:SS

        8. What’s the best time of the day to post a story on Hacker News?
        
        //
        SELECT timestamp, score
        FROM hacker_news
        WHERE score IS NOT NULL
        GROUP BY timestamp
        ORDER BY score DESC;

      Answer:       timestamp	         score
                  2014-06-16T18:38:48Z	517
                  2011-04-18T19:10:06Z	309
                  2015-07-23T16:32:39Z	304
                  2016-04-12T07:28:16Z	282
                          ...           ...

-  SQLite comes with a strftime() function - a very powerful function that allows you to return a formatted date.
   It takes two arguments:
     strftime(format, column)
   Let’s test this function out:

    SELECT timestamp,
       strftime('%H', timestamp)
    FROM hacker_news
    GROUP BY 1
    LIMIT 20;

        9. What do you think this does? Open the hint if you’d like to learn more.
        
        // This returns the hour, HH, of the timestamp column!
            For strftime(__, timestamp):
        
            %Y returns the year (YYYY)
            %m returns the month (01-12)
            %d returns the day of the month (1-31)
            %H returns 24-hour clock (00-23)
            %M returns the minute (00-59)
            %S returns the seconds (00-59)
            if timestamp format is YYYY-MM-DD HH:MM:SS

-  Okay, now we understand how strftime() works. 

        10. Let’s write a query that returns three columns:
            The hours of the timestamp
            The average score for each hour
            The count of stories for each hour
        
        //
        SELECT                                  OR                                  SELECT
           strftime('%H', timestamp),                                                  strftime('%H', timestamp),
           AVG(score),                                                                 AVG(score),
           COUNT(*)                                                                    COUNT(*)
        FROM hacker_news                                                            FROM hacker_news
        GROUP BY strftime('%H', timestamp)                                          GROUP BY 1
        ORDER BY COUNT(*) DESC;                                                     ORDER BY 2 DESC;

-  Let’s edit a few things in the previous query:
    Round the average scores (ROUND()).
    Rename the columns to make it more readable (AS).
    Add a WHERE clause to filter out the NULL values in timestamp.
    Take a look at the result again:

        11. What are the best hours to post a story on Hacker News?
        
        //
        SELECT                                  OR                                  SELECT
           strftime('%H', timestamp) AS 'Time',                                        strftime('%H', timestamp) AS 'Hour',
           ROUND(AVG(score),2) AS 'Score',                                             ROUND(AVG(score), 1) AS 'Average Score',
           COUNT(*) AS 'Stories'                                                       COUNT(*) AS 'Stories'
        FROM hacker_news                                                            FROM hacker_news
        WHERE strftime('%H', timestamp) IS NOT NULL                                 WHERE timestamp IS NOT NULL
        GROUP BY strftime('%H', timestamp)                                          GROUP BY 1
        ORDER BY ROUND(AVG(score),2) DESC;                                          ORDER BY 2 DESC;

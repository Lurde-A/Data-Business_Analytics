1. Examine magazine company orders' tables by pasting the following code into the editor:
//
SELECT *
FROM orders
LIMIT 5;

SELECT *
FROM subscriptions
LIMIT 5;

SELECT * 
FROM customers
LIMIT 5;

2. Just asking answer to match two separate tables and information within them. 

3.1 Join orders table and subscriptions table and select all columns.
Make sure to join on the subscription_id column.
//
SELECT *
FROM orders
LIMIT 10;

SELECT *
FROM subscriptions
LIMIT 10;

SELECT *
FROM orders
JOIN subscriptions
  ON orders.subscription_id = subscriptions.subscription_id;

3.2 Don’t remove the previous query.
Add a second query after your first one that only selects rows from the join where description is equal to ‘Fashion Magazine’.
// 
    Just add additional code to the bottom:
SELECT *
FROM orders
JOIN subscriptions
ON orders.subscription_id = subscriptions.subscription_id
WHERE subscriptions.description = 'Fashion Magazine';

4.1 Suppose we are working for The Codecademy Times, a newspaper with two types of subscriptions:
print newspaper
online articles
Some users subscribe to just the newspaper, some subscribe to just the online edition, and some subscribe to both.
There is a newspaper table that contains information about the newspaper subscribers.
Count the number of subscribers who get a print newspaper using COUNT()
//
SELECT COUNT(*)
FROM newspaper;

4.2 Don’t remove your previous query.
There is also an online table that contains information about the online subscribers.
Count the number of subscribers who get an online newspaper using COUNT().
//
SELECT COUNT(*)
FROM online;

5.1 Let’s return to our newspaper and online subscribers.
Suppose we want to know how many users subscribe to the print newspaper, but not to the online.
Start by performing a left join of newspaper table and online table on their id columns and selecting all columns.
//
SELECT *                             OR                             SELECT COUNT(*)   
FROM newspaper                                                      FROM newspaper
LEFT JOIN online                                                    LEFT JOIN online
ON newspaper.id = online.id;                                        ON newspaper.id=online.id;

5.2 Don’t remove your previous query.
In order to find which users do not subscribe to the online edition, we need to add a WHERE clause.
Add a second query after your first one that adds the following WHERE clause and condition:
WHERE online.id IS NULL
This will select rows where there was no corresponding row from the online table.
//
SELECT *
FROM newspaper
LEFT JOIN online
ON newspaper.id = online.id
WHERE online.id IS NULL;

6.1. Suppose Columbia University has two tables in their database:
The classes table contains information on the classes that the school offers. Its primary key is id.
The students table contains information on all students in the school. Its primary key is id. It contains 
the foreign key class_id, which corresponds to the primary key of classes.
Perform an inner join of classes and students using the primary and foreign keys described above, and select all the columns.
//
SELECT *
FROM classes
JOIN students
ON classes.id = students.class_id;

7.1 Suppose we wanted to know how many users were subscribed during each month of the year. For each month (1, 2, 3) we would 
need to know if a user was subscribed. Follow the steps below to see how we can use a CROSS JOIN to solve this problem.
Let’s start by counting the number of customers who were subscribed to the newspaper during March.
Use COUNT(*) to count the number of rows and a WHERE clause to restrict to two conditions:
start_month <= 3
end_month >= 3
//
SELECT COUNT(*)
FROM newspaper
WHERE start_month <= 3 
AND end_month >= 3;

7.2 The previous query lets us investigate one month at a time. In order to check across all months, we’re going to need to use a cross join.
Our database contains another table called months which contains the numbers between 1 and 12.
Select all columns from the cross join of newspaper and months.
//
SELECT *
FROM newspaper
CROSS JOIN months;

7.3 Create a third query where you add a WHERE statement to your cross join to restrict to two conditions:
start_month <= month
end_month >= month
This will select all months where a user was subscribed.
//
SELECT *
FROM newspaper
CROSS JOIN months
WHERE start_month <= month 
AND end_month >= month;

7.4 Create a final query where you aggregate over each month to count the number of subscribers.
Fill in the blanks in the following query:
SELECT month,
COUNT(*)
FROM ________
CROSS JOIN ________
WHERE ________ AND ________
GROUP BY ________;
//
SELECT month,                             OR                             DELECT month,
COUNT(*)                                                                 COUNT(*) AS 'Subscribers'
FROM newspaper                                                           FROM newspaper
CROSS JOIN months                                                        CROSS JOIN months 
WHERE start_month <= month                                               WHERE start_month <= month
AND end_month >= month                                                   AND end_month >= month
GROUP BY month;                                                          GROUP BY month;

8.1 
Let’s return to our newspaper and online subscriptions. We’d like to create one big table with both sets of data.
Use UNION to stack the newspaper table on top of the online table.
//
SELECT * 
FROM newspaper 
UNION 
SELECT * 
FROM online;

9.1 Our marketing department might want to know a bit more about our customers. For instance, 
they might want to know how many magazines each customer subscribes to. We can easily calculate this using our orders table:

SELECT customer_id,
   COUNT(subscription_id) AS 'subscriptions'
FROM orders
GROUP BY customer_id;

Place the whole query below into a WITH statement, inside parentheses (), and give it name previous_query:
SELECT customer_id,
   COUNT(subscription_id) AS 'subscriptions'
FROM orders
GROUP BY customer_id
//

WITH previous_query AS (
   SELECT customer_id,
      COUNT(subscription_id) AS 'subscriptions'
   FROM orders
   GROUP BY customer_id
)

Join the temporary table previous_query with customers table and select the following columns:

customers.customer_name
previous_query.subscriptions

Remember to use the following ON statement as part of your JOIN:
ON previous_query.customer_id = customers.customer_id
//
WITH previous_query AS (
   SELECT customer_id,
      COUNT(subscription_id) AS 'subscriptions'
   FROM orders
   GROUP BY customer_id 
)
SELECT customers.customer_name, 
   previous_query.subscriptions
FROM previous_query
JOIN customers
  ON previous_query.customer_id = customers.customer_id;






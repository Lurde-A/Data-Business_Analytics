Using database of "fake_apps"

SELECT *
FROM fake_apps;
                                                                                      COUNT
// Let’s count how many apps are in the table

SELECT COUNT(*) 
FROM fake_apps;
                                                                                       SUM
// What is the total number of downloads for all of the apps combined?

SELECT SUM(downloads)
FROM fake_apps;

                                                                                    MAX / MIN
// What is the maximum / least number of times an app has been downloaded?

SELECT MAX(downloads)
FROM fake_apps; /
SELECT MIN(downloads)
FROM fake_apps;

// Write a new query that returns the price of the most expensive app.

SELECT MAX(price)
FROM fake_apps;

                                                                                     AVERAGE
// Calculate the average number of downloads for all the apps in the table.

SELECT AVG(downloads)
FROM fake_apps;

// Write a new query that calculates the average price for all the apps in the table.

SELECT AVG(price)
FROM fake_apps;

                                                                                      ROUND
// Let’s return the name column and a rounded price column.

SELECT name, ROUND(price, 0)
FROM fake_apps;

// In the last exercise, we were able to get the average price of an app ($2.02365) using this query:
SELECT AVG(price)
FROM fake_apps;
Now, let’s edit this query so that it rounds this result to 2 decimal places.

SELECT ROUND(AVG(price),2)
FROM fake_apps;

                                                                                    GROUP BY I
// Our aggregate function is COUNT(). Arranged price into groups.

SELECT price, COUNT(*) 
FROM fake_apps
GROUP BY price;

// In the previous query, add a WHERE clause to count the total number of apps that have been downloaded more than 20,000 times, at each price.

SELECT price, COUNT(*) 
FROM fake_apps
WHERE downloads >20000
GROUP BY price;

//Remove the previous query.Write a new query that calculates the total number of downloads for each category.
Select category and SUM(downloads)

SELECT category, SUM(downloads),{ COUNT(*) } <-- not necessary,just for the interest. 
FROM fake_apps
GROUP BY category;

                                                                                    GROUP BY II
// Use column reference numbers instead of column names after GROUP BY.

    INSTEAD OF                                             WRITING
- SELECT category,                                   - SELECT category.
   price,                                                price,
   AVG(downloads)                                        AVG(downloads)
FROM fake_apps                                       FROM fake_apps
GROUP BY category, price;                            GROUP BY 1, 2;

                                                                                      HAVING
// Write the query which returns the average downloads (rounded) and the number of apps – at each price point. Restrict the query to price points that have more than 10 apps.

     SOLUTION                                        ADDITIONAL SOLUTION                                   
- SELECT price,                                      - SELECT price, 
   ROUND(AVG(downloads)),                                ROUND(AVG(downloads)),
   COUNT(*)                                              COUNT(*)
FROM fake_apps                                       FROM fake_apps
GROUP BY price                                       GROUP BY price
HAVING COUNT(*) > 10;                                HAVING COUNT(*) > 10;
                                                     ORDER BY COUNT(*)
                                                     LIMIT 2;                   !or it may be any other number of result rows limit!

                                                                                      
